import {
  config$1,
  counter,
  findIconDefinition$1,
  icon,
  parse$1,
  text
} from "./chunk-GH2QFOMP.js";
import "./chunk-H3J74AKB.js";
import {
  add_locations,
  check_target,
  create_custom_element,
  hmr,
  html,
  legacy_api,
  log_if_contains_state,
  prop,
  rest_props,
  set_attributes,
  slot
} from "./chunk-57PVOPB6.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  comment,
  template
} from "./chunk-5TG5MQON.js";
import {
  FILENAME,
  HMR,
  child,
  derived,
  first_child,
  get,
  mark_module_end,
  mark_module_start,
  pop,
  proxy,
  push,
  reset,
  set,
  snapshot,
  state,
  strict_equals,
  template_effect,
  user_effect
} from "./chunk-Z2VBAKFY.js";
import "./chunk-X4XZK27Q.js";
import "./chunk-RVAV4ZRS.js";
import "./chunk-UGBVNEQM.js";

// node_modules/fontawesome-svelte/dist/normalize-icon-args.js
function normalizeIconArgs(icon2) {
  if (!icon2 && icon2 !== "") {
    return void 0;
  }
  if (Array.isArray(icon2) && icon2.length === 2) {
    const [prefix, iconName] = icon2;
    return {
      prefix,
      iconName
    };
  }
  if (typeof icon2 === "object" && icon2.prefix && icon2.iconName) {
    return icon2;
  }
  if (typeof icon2 === "string") {
    return {
      prefix: "fas",
      iconName: icon2
    };
  }
  return void 0;
}

// node_modules/fontawesome-svelte/dist/FontAwesomeIcon.svelte
mark_module_start();
FontAwesomeIcon[FILENAME] = "node_modules/fontawesome-svelte/dist/FontAwesomeIcon.svelte";
function FontAwesomeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FontAwesomeIcon);
  let border = prop($$props, "border", 3, false), fixedWidth = prop($$props, "fixedWidth", 3, false), listItem = prop($$props, "listItem", 3, false), pulse = prop($$props, "pulse", 3, false), swapOpacity = prop($$props, "swapOpacity", 3, false), spin = prop($$props, "spin", 3, false), transform = prop($$props, "transform", 19, () => ({})), symbol = prop($$props, "symbol", 3, false), inverse = prop($$props, "inverse", 3, false), bounce = prop($$props, "bounce", 3, false), shake = prop($$props, "shake", 3, false), beat = prop($$props, "beat", 3, false), fade = prop($$props, "fade", 3, false), beatFade = prop($$props, "beatFade", 3, false), flash = prop($$props, "flash", 3, false), spinPulse = prop($$props, "spinPulse", 3, false), spinReverse = prop($$props, "spinReverse", 3, false), style = prop($$props, "style", 3, ""), classList = prop($$props, "class", 3, "");
  let html2 = state("");
  let _faClassList = derived(() => ({
    "fa-spin": spin(),
    "fa-pulse": pulse(),
    "fa-fw": fixedWidth(),
    "fa-border": border(),
    "fa-li": listItem(),
    "fa-inverse": inverse(),
    "fa-flip": strict_equals($$props.flip, true),
    "fa-flip-horizontal": ["both", "horizontal"].includes($$props.flip),
    "fa-flip-vertical": ["both", "vertical"].includes($$props.flip),
    [`fa-${$$props.size}`]: !!$$props.size,
    [`fa-rotate-${$$props.rotation}`]: !!$$props.rotation,
    [`fa-pull-${$$props.pull}`]: !!$$props.pull,
    "fa-swap-opacity": swapOpacity(),
    "fa-bounce": bounce(),
    "fa-shake": shake(),
    "fa-beat": beat(),
    "fa-fade": fade(),
    "fa-beat-fade": beatFade(),
    "fa-flash": flash(),
    "fa-spin-pulse": spinPulse(),
    "fa-spin-reverse": spinReverse()
  }));
  let _faStyles = derived(() => (style() || "").split(";").filter((item) => !!item).map((rule) => rule.split(":").map((item) => item.trim())).reduce(
    (accumulator, current) => {
      const [key, value] = current;
      accumulator[key] = value;
      return accumulator;
    },
    {}
  ));
  function init() {
    const iconArgs = normalizeIconArgs($$props.icon);
    if (!iconArgs) return;
    const iconDefinition = findIconDefinition$1(iconArgs);
    const result = icon(iconDefinition || $$props.icon, {
      symbol: symbol(),
      title: $$props.title,
      styles: style() ? get(_faStyles) : {},
      classes: [
        ...Object.keys(get(_faClassList)).map((key) => get(_faClassList)[key] ? key : "").filter((key) => !!key),
        ...(classList() || "").split(" ")
      ],
      transform: {
        ...strict_equals(typeof transform(), "string") ? parse$1.transform(transform()) : transform()
      },
      mask: normalizeIconArgs($$props.mask)
    });
    if (!result) {
      console.warn(...log_if_contains_state("warn", "Could not find one or more icon(s)", iconDefinition || snapshot($$props.icon), snapshot($$props.mask)));
      return;
    }
    set(html2, proxy(result.html.join(), null, html2));
  }
  user_effect(() => {
    init();
  });
  init();
  var fragment = comment();
  var node = first_child(fragment);
  html(node, () => get(html2), false, false);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FontAwesomeIcon = hmr(FontAwesomeIcon, () => FontAwesomeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FontAwesomeIcon[HMR].source;
    set(FontAwesomeIcon[HMR].source, module.default[HMR].original);
  });
}
var FontAwesomeIcon_default = FontAwesomeIcon;
mark_module_end(FontAwesomeIcon);
if (customElements.get("fontawesome-icon") == null) customElements.define("fontawesome-icon", create_custom_element(
  FontAwesomeIcon,
  {
    border: {},
    fixedWidth: {},
    flip: {},
    icon: {},
    mask: {},
    listItem: {},
    pull: {},
    pulse: {},
    rotation: {},
    swapOpacity: {},
    size: {},
    spin: {},
    transform: {},
    symbol: {},
    title: {},
    inverse: {},
    bounce: {},
    shake: {},
    beat: {},
    fade: {},
    beatFade: {},
    flash: {},
    spinPulse: {},
    spinReverse: {},
    style: {},
    class: {}
  },
  [],
  [],
  true
));

// node_modules/fontawesome-svelte/dist/FontAwesomeLayers.svelte
mark_module_start();
FontAwesomeLayers[FILENAME] = "node_modules/fontawesome-svelte/dist/FontAwesomeLayers.svelte";
var root = add_locations(template(`<div><!></div>`), FontAwesomeLayers[FILENAME], [[27, 0]]);
function FontAwesomeLayers($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FontAwesomeLayers);
  const { familyPrefix } = config$1;
  let fixedWidth = prop($$props, "fixedWidth", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "$$host",
      "fixedWidth",
      "class"
    ],
    "restProps"
  );
  let classList = derived(() => [
    `${familyPrefix}-layers`,
    ...fixedWidth() ? [`${familyPrefix}-fw`] : []
  ].join(" "));
  var div = root();
  let attributes;
  var node = child(div);
  slot(node, $$props, "default", {}, null);
  reset(div);
  template_effect(() => attributes = set_attributes(div, attributes, {
    ...restProps,
    class: `${get(classList)} ${$$props.class}`
  }));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FontAwesomeLayers = hmr(FontAwesomeLayers, () => FontAwesomeLayers[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FontAwesomeLayers[HMR].source;
    set(FontAwesomeLayers[HMR].source, module.default[HMR].original);
  });
}
var FontAwesomeLayers_default = FontAwesomeLayers;
mark_module_end(FontAwesomeLayers);
if (customElements.get("fontawesome-layers") == null) customElements.define("fontawesome-layers", create_custom_element(FontAwesomeLayers, { fixedWidth: {}, class: {} }, ["default"], [], true));

// node_modules/fontawesome-svelte/dist/FontAwesomeLayersText.svelte
mark_module_start();
FontAwesomeLayersText[FILENAME] = "node_modules/fontawesome-svelte/dist/FontAwesomeLayersText.svelte";
function FontAwesomeLayersText($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FontAwesomeLayersText);
  let value = prop($$props, "value", 3, ""), transform = prop($$props, "transform", 19, () => ({})), counter2 = prop($$props, "counter", 3, false), style = prop($$props, "style", 3, ""), classList = prop($$props, "class", 3, "");
  const { familyPrefix } = config$1;
  let _faClassList = derived(() => [
    ...$$props.position ? [`${familyPrefix}-layers-${$$props.position}`] : []
  ]);
  let _faStyles = derived(() => (style() || "").split(";").filter((item) => !!item).map((rule) => rule.split(":").map((item) => item.trim())).reduce(
    (accumulator, current) => {
      const [key, value2] = current;
      accumulator[key] = value2;
      return accumulator;
    },
    {}
  ));
  let renderedText = state("");
  function init() {
    const renderMethod = counter2() ? counter : text;
    set(renderedText, proxy(
      renderMethod(value().toString(), {
        styles: style() ? get(_faStyles) : {},
        classes: [
          ...get(_faClassList),
          ...(classList() || "").split(" ")
        ],
        transform: {
          ...strict_equals(typeof transform(), "string") ? parse$1.transform(transform()) : transform()
        }
      }).html.join(""),
      null,
      renderedText
    ));
  }
  user_effect(() => {
    init();
  });
  init();
  var fragment = comment();
  var node = first_child(fragment);
  html(node, () => get(renderedText), false, false);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FontAwesomeLayersText = hmr(FontAwesomeLayersText, () => FontAwesomeLayersText[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FontAwesomeLayersText[HMR].source;
    set(FontAwesomeLayersText[HMR].source, module.default[HMR].original);
  });
}
var FontAwesomeLayersText_default = FontAwesomeLayersText;
mark_module_end(FontAwesomeLayersText);
if (customElements.get("fontawesome-layerstext") == null) customElements.define("fontawesome-layerstext", create_custom_element(
  FontAwesomeLayersText,
  {
    value: {},
    transform: {},
    counter: {},
    position: {},
    style: {},
    class: {}
  },
  [],
  [],
  true
));
export {
  FontAwesomeIcon_default as FontAwesomeIcon,
  FontAwesomeLayers_default as FontAwesomeLayers,
  FontAwesomeLayersText_default as FontAwesomeLayersText
};
//# sourceMappingURL=fontawesome-svelte.js.map
